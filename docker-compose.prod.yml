services:
  web:
    image: ghcr.io/dvorak-dev/yorick:pr-fix-deprecation-warning
    container_name: yorick-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - db
      - elasticsearch
    volumes:
      - yorick_storage:/rails/storage
      - yorick_logs:/rails/log
    networks:
      - yorick-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    dns:
      - 1.1.1.1
      - 1.0.0.1

  db:
    image: postgres:15-alpine
    container_name: yorick-db
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - yorick-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-yorick} -d ${POSTGRES_DB:-yorick}"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: yorick-elasticsearch
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - yorick-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    mem_limit: 1g

  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: yorick-mcp-server
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-yorick}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-yorick}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - yorick-network
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('MCP Server health check')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  yorick_storage:
    driver: local
  yorick_logs:
    driver: local

networks:
  yorick-network:
    driver: bridge
