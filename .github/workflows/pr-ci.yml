name: PR CI - Test, Lint, and Docker Build

description: >
  Runs tests and linting for all pull requests. If successful, builds and pushes a Docker image tagged for the PR and commit SHA.

on:
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test_lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: yorick_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      elasticsearch:
        image: elasticsearch:8.13.4
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9200:9200
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Ruby 3.2.8
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.8'
          bundler-cache: true
      - name: Prepare Database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yorick_test
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
      - name: Run Minitest Suite
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yorick_test
          CHEWY_HOST: localhost:9200
        run: bundle exec rails test
      - name: Run RuboCop Linter
        run: bundle exec rubocop
      - name: Test & Lint Summary
        run: |
          echo "✅ All quality checks passed!"
          echo "✅ Tests: PASSED"
          echo "✅ Linting: PASSED"
          echo "✅ Ready for Docker build"

  docker_build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test_lint
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=pr-${{ github.event.number }}
            type=sha
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Docker Image Tag Summary
        run: |
          echo "✅ Docker image built and pushed!"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "PR tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}"
          echo "Commit hash tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" 